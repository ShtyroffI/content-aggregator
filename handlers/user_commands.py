from aiogram import Router, types
from aiogram.filters import Command, CommandObject

from sqlalchemy import select
from db.engine import async_session_factory
from db.models import User, Subscription

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
router = Router()

@router.message(Command(commands=['start']))
async def handle_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä.")

@router.message(Command(commands=['subscribe']))
async def handle_subscribe(message: types.Message, command: CommandObject):
    keyword = command.args
    if not keyword:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: /subscribe Python")
        return
    
    try:
        async with async_session_factory() as session:
            user = await session.get(User, message.from_user.id)
            if not user:
                user = User(user_id=message.from_user.id, username=message.from_user.username, first_name=message.from_user.first_name)
                session.add(user)

            stmt = select(Subscription).where(Subscription.user_id == user.user_id, Subscription.keyword == keyword)
            existing_subscription = await session.scalar(stmt)

            if existing_subscription:
                await message.answer(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '{keyword}'.")
            else:
                new_subscription = Subscription(user_id=user.user_id, keyword=keyword)
                session.add(new_subscription)
                await session.commit()
                await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '{keyword}'!")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command(commands=['mysubscriptions']))
async def handle_mysubscriptions(message: types.Message):
    try:
        async with async_session_factory() as session:
            stmt = select(Subscription).where(Subscription.user_id == message.from_user.id)
            result = await session.execute(stmt)
            subscriptions = result.scalars().all()

            if subscriptions:
                subscription_keywords = [sub.keyword for sub in subscriptions]
                response_text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n" + "\n".join(f"- {keyword}" for keyword in subscription_keywords)
                await message.answer(response_text)
            else:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command(commands=['unsubscribe']))
async def handle_unsubscribe(message: types.Message, command: CommandObject):
    keyword = command.args
    if not keyword:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: /unsubscribe Python")
        return
    
    try:
        async with async_session_factory() as session:
            stmt = select(Subscription).where(Subscription.user_id == message.from_user.id, Subscription.keyword == keyword)
            subscription_to_delete = await session.scalar(stmt)
            if subscription_to_delete:
                await session.delete(subscription_to_delete)
                await session.commit()
                await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç '{keyword}'.")
            else:
                await message.answer(f"–í—ã –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '{keyword}'.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –æ—Ç–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message()
async def handle_echo(message: types.Message):
    await message.answer(message.text)