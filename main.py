import os
import content_parser as parser

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandObject
from aiogram.types import BotCommand
from sqlalchemy import select
from db.engine import async_session_factory
from db.models import User, Subscription
from apscheduler.schedulers.asyncio import AsyncIOScheduler

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command(commands=['start']))
async def handle_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä.")

@dp.message(Command(commands=['subscribe']))
async def handle_subscribe(message: types.Message, command: CommandObject):
    keyword = command.args

    if not keyword:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: /subscribe Python")
        return
    
    try:
        async with async_session_factory() as session:
            user = await session.get(User, message.from_user.id)
            if not user:
                user = User(
                    user_id = message.from_user.id,
                    username = message.from_user.username,
                    first_name = message.from_user.first_name
                )
                session.add(user)

            stmt = select(Subscription).where(
                Subscription.user_id == user.user_id,
                Subscription.keyword == keyword
            )
            existing_sunscription = await session.scalar(stmt)

            if existing_sunscription:
                await message.answer(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '{keyword}'.")
            else:
                new_subscription = Subscription(user_id = user.user_id, keyword=keyword)
                session.add(new_subscription)
                await session.commit()
                await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '{keyword}'!")

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command(commands=['mysubscriptions']))
async def handle_mysubscriptions(message: types.Message):
    try:
        async with async_session_factory() as session:
            stmt = select(Subscription).where(Subscription.user_id == message.from_user.id)
            result = await session.execute(stmt)
            subscriptions = result.scalars().all()

            if subscriptions:
                subscription_keywords = [sub.keyword for sub in subscriptions]
                response_text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n" + "\n".join(f"- {keyword}" for keyword in subscription_keywords)
                await message.answer(response_text)
            else:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command(commands=['unsubscribe']))
async def handle_unsubscribe(message: types.Message, command: CommandObject):
    keyword = command.args

    if not keyword:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: /unsubscribe Python")
        return
    
    try:
        async with async_session_factory() as session:
            stmt = select(Subscription).where(
                Subscription.user_id == message.from_user.id,
                Subscription.keyword == keyword
            )
            subscription_to_delete = await session.scalar(stmt)

            if subscription_to_delete:
                await session.delete(subscription_to_delete)
                await session.commit()
                await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç '{keyword}'.")
            else:
                await message.answer(f"–í—ã –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ '{keyword}'.")
            
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message()
async def handle_echo(message: types.Message):
    await message.answer(message.text)

async def set_main_menu(bot: Bot):
    main_menu_commands = [
        BotCommand(command='/mysubscriptions', description='–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'),
        BotCommand(command='/subscribe', description='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—É'),
        BotCommand(command='/unsubscribe', description='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–µ–º—ã')
    ]
    await bot.set_my_commands(main_menu_commands)

async def send_digest(bot: Bot):
    print("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
    html_content = parser.get_html(parser.URL)
    if not html_content:
        return
    articles = parser.parse_articles(html_content)
    if not articles:
        return
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")

    async with async_session_factory() as session:
        query = select(Subscription.keyword).distinct()
        result = await session.execute(query)
        keywords = result.scalars().all()
    
        if not keywords:
            print("–í –±–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
            return

        print(f"–ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")

        for article in articles:
            for keyword in keywords:
                if keyword.lower() in article['title'].lower():
                    stmt = select(Subscription).where(Subscription.keyword == keyword)
                    subscribers_result = await session.execute(stmt)
                    subscribers = subscribers_result.scalars().all()

                    for sub in subscribers:
                        try:
                            await bot.send_message(
                                chat_id=sub.user_id,
                                text=f"–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ '{keyword}'!\n\n{article['title']}\n{article['link']}",
                                disable_web_page_preview=True
                            )
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id}: {e}")
                    break
    
    print("–†–∞—Å—Å—ã–ª–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def main():
    await set_main_menu(bot)

    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_digest, trigger='interval', seconds=20, args=(bot,))
    scheduler.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    from apscheduler.schedulers.asyncio import AsyncIOScheduler
    asyncio.run(main())